# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Reroute
                                 A QGIS plugin
 Routing plugin.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-03-16
        git sha              : $Format:%H$
        copyright            : (C) 2020 by SheharBano
        email                : sheharbanoafzal@hotmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.core import QgsSymbolLayerRegistry, QgsSymbolLayer
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from PyQt5.QtCore import QVariant
from qgis.gui import QgsMessageBar
from qgis.gui import QgsMapToolEmitPoint
from qgis.utils import iface
from qgis import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from qgis.core import *
from qgis.gui import QgsMapCanvas
from qgis.gui import *
from qgis.PyQt import QtGui
from PyQt5 import QtGui
from PyQt5.QtCore import *
from qgis.core import QgsProject
from qgis.core import QgsVectorLayer, QgsPoint, QgsMapLayer
from qgis.core import QgsFeature, QgsMapLayerProxyModel
import processing
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QMessageBox, QFileDialog
from qgis.core import QgsDistanceArea, QgsCoordinateReferenceSystem, QgsPoint, QgsApplication
from qgis.core import (
  QgsGeometry,
  QgsPoint,
  QgsPointXY,
  QgsWkbTypes,
  QgsProject,
  QgsFeatureRequest,
  QgsDistanceArea
)
from qgis.core import QgsDistanceArea, QgsCoordinateReferenceSystem, QgsPoint, QgsApplication, QgsVectorFileWriter, QgsLineSymbolLayer
from qgis.core import QgsProject
from PyQt5.QtCore import *
from qgis.core import QgsProject
from PyQt5.QtCore import *
import collections
import polyline
import os
from qgis.core import QgsFillSymbol, QgsArrowSymbolLayer, QgsSymbol, QgsSymbolLayer,QgsRendererCategory, QgsFeatureRenderer, QgsCategorizedSymbolRenderer, QgsSimpleFillSymbolLayer, QgsRenderContext
# Initialize Qt resources from file resources.py
from .resources import *
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .reroute_dialog import RerouteDialog
import os.path


class Reroute:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Reroute_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Re-route')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Reroute', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/reroute/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True



    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Re-route'),
                action)
            self.iface.removeToolBarIcon(action)


    def drawpoints(self):

        # lyrs = QgsProject.instance().mapLayers().values()
        # for lyr in lyrs:
        #     if lyr.type() != QgsMapLayer.RasterLayer:
        #         QgsProject.instance().layerTreeRoot().findLayer(lyr).setItemVisibilityChecked(False)
        if self.dlg.checkBox.isChecked():
            route = self.dlg.layer.currentLayer()
            ltl = QgsProject.instance().layerTreeRoot().findLayer(route.id())
            ltm = iface.layerTreeView()
            # ltm.sortItems(0, Qt.AscendingOrder)
            # view = iface.layerTreeView()
            # ltm.model().AllowNodeReorder()
            index_newfeat = ltm.model().index(0, 0)
            node = ltm.model().index2node(index_newfeat)
            nodes = ltm.model().layerLegendNodes(node)
            legendNodes = ltm.model().layerLegendNodes(ltl)
            legend_dict = {}
            legend_dict[node.name()] = legendNodes
            # print(legend_dict)
            ltm.setSortingEnabled(True)
            ltm.sortByColumn(0, Qt.DescendingOrder)

            for index, ln in enumerate(legendNodes):
                ln.setData(Qt.Unchecked, Qt.CheckStateRole)

        self.vp_layer = QgsVectorLayer("Point?crs=EPSG:4326", self.dlg.route_id.text(), "memory")
        provider = self.vp_layer.dataProvider()
        QgsProject.instance().addMapLayer(self.vp_layer)
        self.vp_layer.startEditing()
        self.vp_layer.beginEditCommand("Draw Two Points")
        # Implement the Add Feature button
        qgis.utils.iface.actionAddFeature().trigger()
        layer = iface.activeLayer()
        self.i = 0
        count = 0
        count_list = []
        print(layer.featureCount())
        def select(featureAdded):
            layer.select(featureAdded)
        # self.vp_layer.endEditCommand("Done")
        layer.featureAdded.connect(select)
        # selection = layer.selectedFeatures()


    def clearProject(self):
        layer= iface.activeLayer()
        QgsProject.instance().removeMapLayer(layer.id())

    def checkbox(self):
        if self.dlg.checkBox.isChecked() == True:
            self.dlg.layer.setEnabled(True)

        elif self.dlg.checkBox.isChecked() == False:
            self.dlg.layer.setEnabled(False)

    def totimestamp(self, dt, epoch=(1970,1,1)):
        td = dt - epoch
        return (td.microseconds + (td.seconds + td.days * 86400) * 10**6)/10**6

    def route(self):
        try:

            import urllib.request
            import json
            origin_dest = []
            featurelist = []
            if self.dlg.inputpoint.isChecked():
                vp_layer = self.dlg.point.currentLayer()
                countfeat = vp_layer.featureCount()

            else:
                vp_layer = iface.activeLayer()
                vp_layer.commitChanges()
                countfeat = vp_layer.featureCount()

            result = processing.run("native:addautoincrementalfield",
                           {'INPUT': vp_layer,
                            'FIELD_NAME': 'id', 'START': 1, 'GROUP_FIELDS': [], 'SORT_EXPRESSION': '\"id\"',
                            'SORT_ASCENDING': True, 'SORT_NULLS_FIRST': False, 'OUTPUT': 'memory:{0}'.format(self.dlg.route_id.text())})
            QgsProject.instance().removeMapLayer(vp_layer)
            vp_layer = result['OUTPUT']
            QgsProject.instance().addMapLayer(vp_layer)
            features = vp_layer.getFeatures()
            points = []
            pointdist = []
            waypoints = []
            # if vp_layer.featureCount() == 2:
            for feature in vp_layer.getFeatures():
                point = feature.geometry().asPoint()
                xpoint = point.x()
                ypoint = point.y()
                Qpoint = QgsPointXY(xpoint, ypoint)
                points.append(Qpoint)
            distcheck = 0

            if self.dlg.direction.currentText() == 'Start->End':
                # for i in points:
                    # distance = QgsDistanceArea()
                    # Qpoint1 = i
                    # for j in points:
                    #     Qpoint2 = j
                    #     dist = distance.measureLine(Qpoint1, Qpoint2)
                    #     pointdist.append(dist)
                    #     if dist > distcheck:
                    #         distcheck = dist

                self.origin = points[0]
                self.destination = points[countfeat-1]
                # print('End->Start', self.origin, self.destination)
            elif self.dlg.direction.currentText() == 'End->Start':
                # for i in points:
                #     distance = QgsDistanceArea()
                #     Qpoint1 = i
                #     for j in points:
                #         Qpoint2 = j
                #         dist = distance.measureLine(Qpoint1, Qpoint2)
                #         pointdist.append(dist)
                #         if dist > distcheck:
                #             distcheck = dist
                self.origin = points[countfeat-1]
                self.destination = points[0]
                # print('Start->End', self.origin, self.destination)
            # print(vp_layer.featureCount())
            if vp_layer.featureCount() > 3:
                for i in range(countfeat-1):
                    if i != 0 and i != countfeat-1:
                        if self.dlg.direction.currentText() == 'Start->End':
                            if len(waypoints) < 1:
                                waypoints.append('optimize:true|via:'+str(points[i].y())+','+str(points[i].x()))
                            else:
                                waypoints.append('via:'+str(points[i].y())+','+str(points[i].x()))
                        elif self.dlg.direction.currentText() == 'End->Start':
                            if len(waypoints) < 1:
                                waypoints.append('optimize:true|via:'+str(points[countfeat-i].y())+','+str(points[countfeat-i].x()))
                            else:
                                waypoints.append('via:'+str(points[countfeat-i].y())+','+str(points[countfeat-i].x()))
                print('|'.join(waypoints))
            elif vp_layer.featureCount() == 3:
                for i in points:
                    if i != self.origin and i != self.destination:
                        waypoints.append('optimize:true|via:'+ str(i.y())+','+str(i.x()))
            else:
                pass
            # print(waypoints[0], 'waypoints')

                # print(distcheck, 'dist')
                # print(pointdist, 'pointdist')
                # print(origin.x(),origin.y(), destination.x(),destination.y(), 'origin_dest')

                # vp_layer.select(origin)
                # vp_layer.select(destination)

            for feature in vp_layer.getFeatures():
                geometry = feature.geometry()
                origin_dest.append({geometry.asPoint().y(), geometry.asPoint().x()})
            # print(origin_dest)
            endpoint = 'https://maps.googleapis.com/maps/api/directions/json?'
            APIkey = self.dlg.api.text()
            # mode = 'driving'
            origin_str = self.origin.y(),self.origin.x()
            destination_str = self.destination.y(),self.destination.x()
            # departure_time = (self.dlg.timeEdit.time().hour()*3600 + self.dlg.timeEdit.time().minute()*60+ self.dlg.timeEdit.time().second())
            # print(departure_time)
            import time
            import datetime
            # departure = self.totimestamp(self.dlg.timeEdit.dateTime())
            if self.dlg.nowtime.isChecked():
                departure = 'now'
            else:
                departure = self.dlg.timeEdit.dateTime().toSecsSinceEpoch()
            print(departure)
            if vp_layer.featureCount() > 3:

                if self.dlg.avoid.currentText() == 'None':
                    nav_request = 'origin={0},{1}&destination={2},{3}&waypoints={4}&departure_time={5}&mode={6}&model={7}&key={8}'.format(self.origin.y(),self.origin.x(), self.destination.y(),self.destination.x(),'|'.join(waypoints),departure, self.dlg.mode.currentText(),self.dlg.model.currentText(), api_key)
                else:
                    nav_request = 'origin={0},{1}&destination={2},{3}&waypoints={4}&departure_time={5}&avoid={6}&mode={7}&model={8}&key={9}'.format(self.origin.y(),
                                                                                               self.origin.x(),
                                                                                               self.destination.y(),
                                                                                               self.destination.x(),
                                                                                               '|'.join(waypoints),
                                                                                                departure,
                                                                                               self.dlg.avoid.currentText(),
                                                                                               self.dlg.mode.currentText(),
                                                                                               self.dlg.model.currentText(),
                                                                                               api_key)
            elif vp_layer.featureCount() == 3:
                if self.dlg.avoid.currentText() == 'None':
                    nav_request = 'origin={0},{1}&destination={2},{3}&waypoints={4}&departure_time={5}&mode={6}&model={7}&key={8}'.format(self.origin.y(),self.origin.x(), self.destination.y(),self.destination.x(),waypoints[0],departure, self.dlg.mode.currentText(),self.dlg.model.currentText(), api_key)
                else:
                    nav_request = 'origin={0},{1}&destination={2},{3}&waypoints={4}&departure_time={5}&avoid={6}&mode={7}&model={8}&key={9}'.format(self.origin.y(),
                                                                                               self.origin.x(),
                                                                                               self.destination.y(),
                                                                                               self.destination.x(),
                                                                                               waypoints[0],
                                                                                                departure,
                                                                                               self.dlg.avoid.currentText(),
                                                                                               self.dlg.mode.currentText(),
                                                                                               self.dlg.model.currentText(),
                                                                                               api_key)


            else:
                if self.dlg.avoid.currentText() == 'None':
                    nav_request = 'origin={0},{1}&destination={2},{3}&departure_time={4}&mode={5}&model={6}&key={7}'.format(
                        self.origin.y(), self.origin.x(), self.destination.y(), self.destination.x(), departure,
                        self.dlg.mode.currentText(), self.dlg.model.currentText(), api_key)
                    # print(nav_request)
                else:
                    nav_request = 'origin={0},{1}&destination={2},{3}&departure_time{4}&avoid={5}&mode={6}&model={7}&key={8}'.format(
                        self.origin.y(),
                        self.origin.x(),
                        self.destination.y(),
                        self.destination.x(),
                        departure,
                        self.dlg.avoid.currentText(),
                        self.dlg.mode.currentText(),
                        self.dlg.model.currentText(),
                        api_key)
            request = endpoint + nav_request
            print(request)
            response = urllib.request.urlopen(request).read()
            directions = json.loads(response)
            keys =  directions.keys()
            # print(keys)
            # print(directions['error_message'], directions['routes'])
            routes = directions['routes']
            legs = routes[0]['legs']
            line = routes[0]['overview_polyline']
            # print(routes)
            points = polyline.decode(line['points'])
            self.route_layer = QgsVectorLayer(
                "Point?crs=EPSG:4326&field=route_id:String(100)&field=distance:String(100)&field=time:String(100)&field=ascending/descending:String(100)&field=departure_time:String(100)&field=roads_to_avoid:String(100)&field=traffic_model:String(100)",
                "route_points", "memory")
            provider = self.route_layer.dataProvider()
            # QgsProject.instance().addMapLayer(self.route_layer)
            if len(legs[0]['duration']['text'].split(' ')) == 2:
                duration1 = legs[0]['duration']['text'].split(' ')
                print(duration1 , 'dur')
                duration = duration1[0]
            else:
                duration1 = legs[0]['duration']['text'].split(' ')
                print(duration1, 'dur1')
                duration = str((int(duration1[0])*60) + int(duration1[2]))


            self.route_layer.startEditing()

            route_attrib = [self.dlg.route_id.text(), legs[0]['distance']['text'].split(' ')[0], duration, self.dlg.direction.currentText(),(self.dlg.timeEdit.dateTime()),self.dlg.avoid.currentText(), self.dlg.model.currentText()]
            # print((self.dlg.timeEdit.time()))
            # print(route_attrib)
            for i in points:
                outelem = QgsFeature(self.route_layer.fields())
                outelem.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(i[1], i[0])))
                outelem.setFields(self.route_layer.fields())
                outelem.setAttributes(route_attrib)
                featurelist.append(outelem)
                # print(outelem)
            self.route_layer.dataProvider().addFeatures(featurelist)
            self.route_layer.commitChanges()

            result = processing.run("qgis:pointstopath", {
                    'INPUT': self.route_layer,
                    'ORDER_FIELD': 'route_id', 'GROUP_FIELD': None, 'DATE_FORMAT': '', 'OUTPUT': 'memory:'})

            if not self.dlg.checkBox.isChecked():
                route = QgsVectorLayer(
                    "Linestring?crs=EPSG:4326&field=route_id:String(100)&field=distance(km):String(100)&field=time(min):String(100)&field=ascending/descending:String(100)&field=departure_time:String(100)&field=duration_in_traffic(min):String(100)&field=roads_to_avoid:String(100)&field=traffic_model:String(100)&field=no_of_nodes:String(100)",
                    "route", "memory")
            else:
                # print(self.dlg.route_id.text(), route_attrib2)
                route = self.dlg.layer.currentLayer()
            fields = route.dataProvider().fields()
            field_name  = [field.name() for field in fields]

            # line_layer = QgsVectorLayer(result['OUTPUT'], 'route')
            featurelist2=[]

            # if self.dlg.mode.currentText() not in ['walking', 'bicycling', 'transit']:
            if 'duration_in_traffic' in legs[0].keys():
                if len(legs[0]['duration']['text'].split(' ')) == 2:
                    duration1 = legs[0]['duration_in_traffic']['text'].split(' ')
                    print(duration1, 'dur12')
                    duration_in_traffic = duration1[0]
                else:
                    duration1 = legs[0]['duration_in_traffic']['text'].split(' ')
                    print(duration1, 'dur13')
                    duration_in_traffic = str((int(duration1[0])*60) + int(duration1[2]))
                if 'fid' in field_name:
                    route_attrib2 = [route.featureCount(), self.dlg.route_id.text(), legs[0]['distance']['text'].split(' ')[0], duration, self.dlg.direction.currentText(),(self.dlg.timeEdit.dateTime()),duration_in_traffic ,self.dlg.avoid.currentText(), self.dlg.model.currentText(), str(self.route_layer.featureCount())]
                else:
                    route_attrib2 = [self.dlg.route_id.text(),
                                     legs[0]['distance']['text'].split(' ')[0], duration,
                                     self.dlg.direction.currentText(), (self.dlg.timeEdit.dateTime()),
                                     duration_in_traffic, self.dlg.avoid.currentText(), self.dlg.model.currentText(),
                                     str(self.route_layer.featureCount())]
            else:
                if 'fid' in field_name:
                    route_attrib2 = [route.featureCount(), self.dlg.route_id.text(), legs[0]['distance']['text'].split(' ')[0], duration, self.dlg.direction.currentText(),(self.dlg.timeEdit.dateTime()),'None',self.dlg.avoid.currentText(), self.dlg.model.currentText(), str(self.route_layer.featureCount())]
                else:
                    route_attrib2 = [self.dlg.route_id.text(),
                                     legs[0]['distance']['text'].split(' ')[0], duration,
                                     self.dlg.direction.currentText(), (self.dlg.timeEdit.dateTime()),
                                     duration_in_traffic, self.dlg.avoid.currentText(), self.dlg.model.currentText(),
                                     str(self.route_layer.featureCount())]

                # print(field_name)
                # if 'fid' in field_name:
                #     # route.startEditing()
                #     # print(route.dataProvider().fieldNameIndex('fid'))
                #     # route.dataProvider().deleteAttributes([route.dataProvider().fieldNameIndex('fid')])
                #     # route.updateFields()
                #     # field_name = [field.name() for field in fields]
                #     # print(field_name)
                #
                #     route_attrib2 = [route.featureCount(), self.dlg.route_id.text(), legs[0]['distance']['text'].split(' ')[0], duration, self.dlg.direction.currentText(),(self.dlg.timeEdit.dateTime()),'None',self.dlg.avoid.currentText(), self.dlg.model.currentText(), str(self.route_layer.featureCount())]
                # else:
                #      pass
            provider = route.dataProvider()
            route.startEditing()

            request = QgsFeatureRequest()
            # set order by field
            clause = QgsFeatureRequest.OrderByClause('route_id', ascending=False)
            orderby = QgsFeatureRequest.OrderBy([clause])
            request.setOrderBy(orderby)
            fields = route.dataProvider().fields()
            field_name = [field.name() for field in fields]
            for feature in result['OUTPUT'].getFeatures():
                outelem = QgsFeature(route.fields())
                outelem.setGeometry(feature.geometry())
                outelem.setFields(route.fields())
                if 'fid' not in field_name:
                    outelem.setAttributes(route_attrib2)
                else:
                    for index, field in enumerate(field_name):
                        if field != 'fid':
                            print(field,route_attrib2[index])
                            outelem[field] = route_attrib2[index]
                featurelist2.append(outelem)

            route.dataProvider().addFeatures(featurelist2)


                # route.updateFeature(feature)
            route.commitChanges()
            # QgsProject.instance().addMapLayer(route)
            if route.featureCount() == 1:
                file_path = os.path.abspath(os.path.join(os.path.dirname(__file__), "route_style.qml"))
                route.loadNamedStyle(file_path)
            else:

                # result_del = processing.run("qgis:deletecolumn", {
                #     'INPUT': route,
                #     'COLUMN': ['gid'], 'OUTPUT': 'memory:'})
                # QgsProject.instance().addMapLayer(result_del['OUTPUT'])

                # result = processing.run("native:addautoincrementalfield",
                #                         {'INPUT': result_del['OUTPUT'],
                #                          'FIELD_NAME': 'gid', 'START': 1, 'GROUP_FIELDS': [],
                #                          'SORT_EXPRESSION': '',
                #                          'SORT_ASCENDING': False, 'SORT_NULLS_FIRST': False, 'OUTPUT': 'memory:route'})
                #
                # QgsProject.instance().removeMapLayer(route)
                # route = result['OUTPUT']
                QgsProject.instance().addMapLayer(route)
                # provide file name index and field's unique values
                # fni = route.dataProvider().fieldNameIndex('route_id')
                # unique_values = route.uniqueValues(fni)
                # fni2 = route.dataProvider().fieldNameIndex('route_id')
                # unique_values2 = route.uniqueValues(fni2)
                # unique_values2 = sorted(unique_values2)
                unique_values2 = []
                unique_values = []
                request = QgsFeatureRequest()
                # set order by field
                clause = QgsFeatureRequest.OrderByClause('route_id', ascending=False)
                orderby = QgsFeatureRequest.OrderBy([clause])
                request.setOrderBy(orderby)
                for feature in route.getFeatures():
                    attrib = feature.attributes()
                    unique_values2.append(attrib[route.dataProvider().fieldNameIndex('route_id')])
                    unique_values.append(attrib[route.dataProvider().fieldNameIndex('route_id')])
                from random import randrange
                # fill categories
                categories = []
                # print(unique_values)
                # unique_values = sorted(unique_values)
                print(unique_values, unique_values2)
                for index, unique_value in enumerate(unique_values):
                    # initialize the default symbol for this geometry type
                    # symbol = QgsSymbol.defaultSymbol(route.geometryType())
                    # symbol = QgsSymbol.Symbol().setShape(QgsSimpleMarkerSymbolLayerBase.Star
                    # symbol.appendSymbolLayer(symbol_layer)
                    # configure a symbol layer
                    # sym = route.renderer().symbol()
                    # double headed
                    symbol = QgsSymbol.defaultSymbol(route.geometryType())
                    # double headed
                    sym_layer = QgsArrowSymbolLayer.create(
                        {
                            "arrow_width": "1",
                            "arrow_start_width": "1",
                            "head_length": "1.5",
                            "head_thickness": "1.5",
                            "head_type": "0",
                            "arrow_type": "0",
                            "is_curved": "0",
                        }
                    )
                    fill_sym = QgsFillSymbol.createSimple(
                        {"color": '%d, %d, %d' % (randrange(0, 256), randrange(0, 256), randrange(0, 256))}
                    )
                    sym_layer.setSubSymbol(fill_sym)
                    symbol.changeSymbolLayer(0, sym_layer)
                    # layer_style = {}
                    # layer_style['color'] = '%d, %d, %d' % (randrange(0, 256), randrange(0, 256), randrange(0, 256))
                    # layer_style['outline'] = '#FF0000'
                    # # layer_style['width'] = '7.6'
                    # symbol_layer = QgsSimpleFillSymbolLayer.create(layer_style)

                    # replace default symbol layer with the configured one
                    # if symbol_layer is not None:
                    #     symbol.changeSymbolLayer(0, symbol_layer)
                    #     symbol.setWidth(0.66)

                    # create renderer object
                    category = QgsRendererCategory(unique_value, symbol, str(unique_values2[index]))
                    # entry for the list of category items
                    categories.append(category)

                # create renderer object
                renderer = QgsCategorizedSymbolRenderer('route_id', categories)

                # assign the created renderer to the layer
                if renderer is not None:
                    route.setRenderer(renderer)
                route.triggerRepaint()


                ltl = QgsProject.instance().layerTreeRoot().findLayer(route.id())
                ltm = iface.layerTreeView()
                # ltm.sortItems(0, Qt.AscendingOrder)
                # view = iface.layerTreeView()
                # ltm.model().AllowNodeReorder()
                index_newfeat = ltm.model().index(0, 0)
                node = ltm.model().index2node(index_newfeat)
                nodes = ltm.model().layerLegendNodes(node)
                legendNodes = ltm.model().layerLegendNodes(ltl)
                legend_dict = {}
                legend_dict[node.name()] = legendNodes
                # print(legend_dict)
                ltm.setSortingEnabled(True)
                ltm.sortByColumn(0, Qt.DescendingOrder)

                for index, ln in enumerate(legendNodes):
                    if index+1 != route.featureCount():
                        ln.setData(Qt.Unchecked, Qt.CheckStateRole)
                # index_newfeat = ltm.model().index(route.featureCount()-1, 0)
                # print(index_newfeat)
                # node = ltm.model().index2node(index_newfeat)
                # print(node)
                # nodes = ltm.model().layerLegendNodes(node)
                # # layer_and_nodes[n.name()] = nodes
                # # print(layer_and_nodes)
                # # legend_get = ltm.model().index2legendNode(nodes)
                # print(nodes)


                    # print(index, ln)
                    # print(index, ltm.model().legendRootIndex(ln), ltm.model().legendNode2index(ln), ln, index_newfeat)
                    # if index+1 != int(self.dlg.route_id.text()):

                    # ln.setData(Qt.Checked, Qt.CheckStateRole)

            if not self.dlg.checkBox.isChecked():
                if self.dlg.output.text() != '':
                    path = self.dlg.output.text()
                    QgsVectorFileWriter.writeAsVectorFormat(route, path, 'UTF-8',
                                                                route.crs(), 'ESRI Shapefile')
                    # layer = QgsProject.instance().layerTreeRoot().findLayer(route.id())
                    # print(layer.name())
                    output = self.dlg.output.text().split('/')
                    route_path = QgsVectorLayer(path, output[len(output)-1].split('.')[0])
                    QgsProject.instance().addMapLayer(route_path)
                else:
                    QgsProject.instance().addMapLayer(route)
            listselect = []
            for index, feature in enumerate(route.getFeatures()):
                if index+1 == route.featureCount():
                    listselect.append(feature.id())
            route.select(listselect)
            iface.actionZoomToSelected().trigger()


        except Exception as e:
            alert = QMessageBox()
            alert.setWindowTitle('Alert')

            if self.dlg.mode.currentText() in ['walking', 'bicycling', 'transit']:
                alert.setText(str(e)+'\nRoute not available for selected mode.')
            else:
                alert.setText(str(e))
            result = alert.exec_()
            print(e)
        # provider.addAttributes([QgsField("poi_id", QVariant.Int),QgsField("name_displ", QVariant.String)])

    def OpenBrowse(self):
        file = QFileDialog()
        file.setAcceptMode(1)
        dir_ = file.getSaveFileName(None, 'Save as file:', 'C:\\', filter="ESRI Shapefiles(*.shp)")
        self.dlg.output.setText(str(dir_[0]))

    def timefunc(self):
        if self.dlg.nowtime.isChecked():
            self.dlg.timeEdit.setEnabled(False)
        else:
            self.dlg.timeEdit.setEnabled(True)

    def layerselect(self):
        if self.dlg.inputpoint.isChecked():
            self.dlg.draw.setEnabled(False)
            self.dlg.point.setEnabled(True)
        else:
            self.dlg.draw.setEnabled(True)
            self.dlg.point.setEnabled(False)

    def run(self):
        """Run method that performs all the real work"""
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            list_model = ['best_guess', 'pessimistic', 'optimistic']
            list_direction = ['Start->End', 'End->Start']
            list_mode = ['driving','walking' ,'bicycling','transit']
            list_avoid = ['None','tolls', 'highways', 'ferries', 'indoor']
            self.dlg = RerouteDialog()
            self.dlg.layer.setEnabled(False)
            self.dlg.checkBox.stateChanged.connect(self.checkbox)
            self.dlg.draw.clicked.connect(self.drawpoints)
            self.dlg.reset.clicked.connect(self.clearProject)
            self.dlg.run.clicked.connect(self.route)
            self.dlg.save_output.clicked.connect(self.OpenBrowse)
            time = QDateTime()
            current_time = time.currentDateTime()
            self.dlg.timeEdit.setDateTime(current_time)
            self.dlg.nowtime.setChecked(True)
            self.dlg.timeEdit.setEnabled(False)
            for i in list_model:
                self.dlg.model.addItem(i)
            for i in list_direction:
                self.dlg.direction.addItem(i)
            for i in list_mode:
                self.dlg.mode.addItem(i)
            for i in list_avoid:
                self.dlg.avoid.addItem(i)

            self.dlg.nowtime.stateChanged.connect(self.timefunc)
            self.dlg.point.setEnabled(False)
            self.dlg.inputpoint.stateChanged.connect(self.layerselect)
            self.dlg.point.setFilters(QgsMapLayerProxyModel.PointLayer)
            self.dlg.layer.setFilters(QgsMapLayerProxyModel.LineLayer)
        # show the dialog
        self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dlg)
        self.dlg.maximumSize()
        self.dlg.show()
        # Run the dialog event loop
        # result = self.dlg.exec_()
        # See if OK was pressed
        # if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            # pass

